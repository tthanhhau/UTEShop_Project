import Cart from "../models/cart.js";
import Product from "../models/product.js";
import asyncHandler from "../utils/asyncHandler.js";

// @desc    L·∫•y gi·ªè h√†ng c·ªßa user
// @route   GET /api/cart
// @access  Private
export const getCart = asyncHandler(async (req, res) => {
  const cart = await Cart.findOne({ user: req.user._id }).populate({
    path: "items.product",
    select: "name price images category brand stock discountPercentage",
  });

  if (!cart) {
    return res.status(200).json({
      success: true,
      data: {
        items: [],
        totalItems: 0,
        totalAmount: 0,
      },
    });
  }

  // L·ªçc ra nh·ªØng s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i (ƒë√£ b·ªã x√≥a)
  const validItems = cart.items.filter(item => item.product !== null);

  // N·∫øu c√≥ s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i, c·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng
  if (validItems.length !== cart.items.length) {
    cart.items = validItems;
    await cart.save();
  }

  // T√≠nh t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng ti·ªÅn
  const totalItems = validItems.reduce((total, item) => total + item.quantity, 0);
  const totalAmount = validItems.reduce((total, item) => {
    const itemPrice = item.product.price * item.quantity;
    const discountAmount = item.product.discountPercentage > 0
      ? itemPrice * item.product.discountPercentage / 100
      : 0;
    return total + (itemPrice - discountAmount);
  }, 0);
  const distinctItemCount = validItems.length; // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau

  res.status(200).json({
    success: true,
    data: {
      items: validItems,
      totalItems,
      totalAmount,
      distinctItemCount, // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau cho badge
    },
  });
});

// @desc    Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
// @route   POST /api/cart/add
// @access  Private
export const addToCart = asyncHandler(async (req, res) => {
  const { productId, quantity = 1 } = req.body;

  // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
  const product = await Product.findById(productId);
  if (!product) {
    return res.status(404).json({
      success: false,
      message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i",
    });
  }

  // Ki·ªÉm tra s·ªë l∆∞·ª£ng trong kho
  if (product.stock < quantity) {
    return res.status(400).json({
      success: false,
      message: `Ch·ªâ c√≤n ${product.stock} s·∫£n ph·∫©m trong kho`,
    });
  }

  // T√¨m gi·ªè h√†ng c·ªßa user
  let cart = await Cart.findOne({ user: req.user._id });
  let isNewProduct = false;

  if (!cart) {
    // T·∫°o gi·ªè h√†ng m·ªõi n·∫øu ch∆∞a c√≥
    cart = new Cart({
      user: req.user._id,
      items: [{ product: productId, quantity }],
    });
    isNewProduct = true; // Gi·ªè h√†ng m·ªõi = s·∫£n ph·∫©m m·ªõi
  } else {
    // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
    const existingItemIndex = cart.items.findIndex(
      (item) => item.product.toString() === productId
    );

    if (existingItemIndex > -1) {
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥
      const newQuantity = cart.items[existingItemIndex].quantity + quantity;

      if (product.stock < newQuantity) {
        return res.status(400).json({
          success: false,
          message: `Ch·ªâ c√≤n ${product.stock} s·∫£n ph·∫©m trong kho`,
        });
      }

      cart.items[existingItemIndex].quantity = newQuantity;
      isNewProduct = false; // S·∫£n ph·∫©m ƒë√£ c√≥, ch·ªâ tƒÉng s·ªë l∆∞·ª£ng
    } else {
      // Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
      cart.items.push({ product: productId, quantity });
      isNewProduct = true; // S·∫£n ph·∫©m m·ªõi ƒë∆∞·ª£c th√™m v√†o
    }
  }

  await cart.save();

  // Populate v√† tr·∫£ v·ªÅ gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
  const updatedCart = await Cart.findOne({ user: req.user._id }).populate({
    path: "items.product",
    select: "name price images category brand stock discountPercentage",
  });

  // L·ªçc ra nh·ªØng s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i (ƒë√£ b·ªã x√≥a)
  const validItems = updatedCart.items.filter(item => item.product !== null);

  const totalItems = validItems.reduce((total, item) => total + item.quantity, 0);
  const totalAmount = validItems.reduce((total, item) => {
    return total + (item.product.price * item.quantity);
  }, 0);
  const distinctItemCount = validItems.length; // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau

  console.log('üõí Backend AddToCart Debug:', {
    isNewProduct,
    totalItems,
    distinctItemCount,
    cartItems: validItems.map(item => ({
      productId: item.product._id,
      quantity: item.quantity
    }))
  });

  res.status(200).json({
    success: true,
    message: "ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng",
    data: {
      items: validItems,
      totalItems,
      totalAmount,
      distinctItemCount, // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau cho badge
      isNewProduct, // Th√™m flag ƒë·ªÉ frontend bi·∫øt c√≥ ph·∫£i s·∫£n ph·∫©m m·ªõi kh√¥ng
    },
  });
});

// @desc    C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
// @route   PUT /api/cart/update
// @access  Private
export const updateCartItem = asyncHandler(async (req, res) => {
  const { productId, quantity } = req.body;

  // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
  const product = await Product.findById(productId);
  if (!product) {
    return res.status(404).json({
      success: false,
      message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i",
    });
  }

  // Ki·ªÉm tra s·ªë l∆∞·ª£ng trong kho
  if (product.stock < quantity) {
    return res.status(400).json({
      success: false,
      message: `Ch·ªâ c√≤n ${product.stock} s·∫£n ph·∫©m trong kho`,
    });
  }

  // T√¨m gi·ªè h√†ng c·ªßa user
  const cart = await Cart.findOne({ user: req.user._id });
  if (!cart) {
    return res.status(404).json({
      success: false,
      message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i",
    });
  }

  // T√¨m index c·ªßa s·∫£n ph·∫©m trong gi·ªè h√†ng
  const itemIndex = cart.items.findIndex(
    (item) => item.product.toString() === productId
  );

  if (itemIndex === -1) {
    return res.status(404).json({
      success: false,
      message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng",
    });
  }

  // L∆∞u l·∫°i s·ªë l∆∞·ª£ng c≈©
  const oldQuantity = cart.items[itemIndex].quantity;

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
  cart.items[itemIndex].quantity = quantity;

  await cart.save();

  // Populate v√† tr·∫£ v·ªÅ gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
  const updatedCart = await Cart.findOne({ user: req.user._id }).populate({
    path: "items.product",
    select: "name price images category brand stock discountPercentage",
  });

  // L·ªçc ra nh·ªØng s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i (ƒë√£ b·ªã x√≥a)
  const validItems = updatedCart.items.filter(item => item.product !== null);

  const totalItems = validItems.reduce((total, item) => total + item.quantity, 0);
  const totalAmount = validItems.reduce((total, item) => {
    return total + (item.product.price * item.quantity);
  }, 0);
  const distinctItemCount = validItems.length; // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau

  console.log('üõí UpdateCartItem Debug:', {
    productId,
    oldQuantity,
    newQuantity: quantity,
    totalItems,
    distinctItemCount,
    isQuantityUpdate: true, // ƒê√°nh d·∫•u r√µ l√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    isNewProduct: false // Kh√¥ng ph·∫£i s·∫£n ph·∫©m m·ªõi
  });

  res.status(200).json({
    success: true,
    message: "ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m",
    data: {
      items: validItems,
      totalItems,
      totalAmount,
      distinctItemCount, // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau cho badge
      isQuantityUpdate: true, // Th√™m flag ƒë·ªÉ frontend bi·∫øt l√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
      isNewProduct: false, // Kh√¥ng ph·∫£i s·∫£n ph·∫©m m·ªõi
    },
  });
});

// @desc    X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
// @route   DELETE /api/cart/remove/:productId
// @access  Private
export const removeFromCart = asyncHandler(async (req, res) => {
  const { productId } = req.params;

  const cart = await Cart.findOne({ user: req.user._id });
  if (!cart) {
    return res.status(404).json({
      success: false,
      message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i",
    });
  }

  cart.items = cart.items.filter(
    (item) => item.product.toString() !== productId
  );

  await cart.save();

  // Populate v√† tr·∫£ v·ªÅ gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
  const updatedCart = await Cart.findOne({ user: req.user._id }).populate({
    path: "items.product",
    select: "name price images category brand stock discountPercentage",
  });

  // L·ªçc ra nh·ªØng s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i (ƒë√£ b·ªã x√≥a)
  const validItems = updatedCart.items.filter(item => item.product !== null);

  const totalItems = validItems.reduce((total, item) => total + item.quantity, 0);
  const totalAmount = validItems.reduce((total, item) => {
    return total + (item.product.price * item.quantity);
  }, 0);
  const distinctItemCount = validItems.length; // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau

  res.status(200).json({
    success: true,
    message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng",
    data: {
      items: validItems,
      totalItems,
      totalAmount,
      distinctItemCount, // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau cho badge
    },
  });
});

// @desc    X√≥a to√†n b·ªô gi·ªè h√†ng
// @route   DELETE /api/cart/clear
// @access  Private
export const clearCart = asyncHandler(async (req, res) => {
  await Cart.findOneAndDelete({ user: req.user._id });

  res.status(200).json({
    success: true,
    message: "ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng",
    data: {
      items: [],
      totalItems: 0,
      totalAmount: 0,
      distinctItemCount: 0, // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau cho badge
    },
  });
});

// @desc    L·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
// @route   GET /api/cart/count
// @access  Private
export const getCartItemCount = asyncHandler(async (req, res) => {
  const cart = await Cart.findOne({ user: req.user._id });

  const totalItems = cart ? cart.items.reduce((total, item) => total + item.quantity, 0) : 0;
  const distinctItemCount = cart ? cart.items.length : 0; // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau

  res.status(200).json({
    success: true,
    data: {
      totalItems,
      distinctItemCount, // S·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau cho badge
    },
  });
});
