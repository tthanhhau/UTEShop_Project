import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Order, OrderDocument } from '../schemas/OrderSchema';
import { User, UserDocument } from '../schemas/UserSchema';

@Injectable()
export class OrderService {
  constructor(
    @InjectModel(Order.name) private orderModel: Model<OrderDocument>,
    @InjectModel(User.name) private userModel: Model<UserDocument>,
  ) { }

  async findAll(page = 1, limit = 10, status = '', paymentStatus = '', paymentMethod = '', search = '') {
    console.log('üü¢üü¢üü¢ ORDER Service - search:', search, 'status:', status, 'paymentStatus:', paymentStatus, 'paymentMethod:', paymentMethod);
    const skip = (page - 1) * limit;
    const query: any = {};

    // Build filter conditions
    const filterConditions: any = {};
    if (status) {
      filterConditions.status = status;
    }
    if (paymentStatus) {
      filterConditions.paymentStatus = paymentStatus;
    }
    if (paymentMethod) {
      filterConditions.paymentMethod = paymentMethod;
    }

    // Build search conditions
    if (search) {
      // T√¨m users c√≥ name match search term
      const users = await this.userModel.find({
        $or: [
          { name: { $regex: search, $options: 'i' } },
          { email: { $regex: search, $options: 'i' } },
          { phone: { $regex: search, $options: 'i' } }
        ]
      }).select('_id').exec();

      const userIds = users.map(u => u._id);
      console.log('üü¢üü¢üü¢ ORDER Service - found', userIds.length, 'users matching search');

      // T√¨m ki·∫øm theo m√£ ƒë∆°n h√†ng (_id) ho·∫∑c user
      const searchConditions: any = {
        $or: []
      };

      // T√¨m theo _id (m√£ ƒë∆°n h√†ng) - ObjectId c√≥ th·ªÉ ƒë∆∞·ª£c t√¨m b·∫±ng string
      // N·∫øu search c√≥ th·ªÉ l√† ObjectId h·ª£p l·ªá, th·ª≠ t√¨m theo _id
      try {
        // N·∫øu search l√† ObjectId h·ª£p l·ªá, th√™m v√†o ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
        if (Types.ObjectId.isValid(search)) {
          searchConditions.$or.push({ _id: new Types.ObjectId(search) });
        }
        // N·∫øu kh√¥ng ph·∫£i ObjectId h·ª£p l·ªá nh∆∞ng c√≥ ƒë·ªô d√†i ph√π h·ª£p, t√¨m theo string representation
        else if (search.length >= 8) {
          // D√πng aggregation ƒë·ªÉ convert _id sang string v√† t√¨m ki·∫øm
          searchConditions.$or.push({
            $expr: {
              $regexMatch: {
                input: { $toString: '$_id' },
                regex: search,
                options: 'i'
              }
            }
          });
        }
      } catch (e) {
        console.log('Error converting search to ObjectId:', e);
      }

      // T√¨m theo user
      if (userIds.length > 0) {
        searchConditions.$or.push({ user: { $in: userIds } });
      }

      // N·∫øu kh√¥ng c√≥ ƒëi·ªÅu ki·ªán n√†o trong $or, lo·∫°i b·ªè searchConditions
      if (searchConditions.$or.length === 0) {
        searchConditions.$or.push({ _id: null }); // Kh√¥ng match g√¨ c·∫£
      }

      // N·∫øu c√≥ c·∫£ filter v√† search, d√πng $and ƒë·ªÉ k·∫øt h·ª£p
      if (Object.keys(filterConditions).length > 0) {
        query.$and = [
          filterConditions,
          searchConditions
        ];
      } else {
        // N·∫øu ch·ªâ c√≥ search, ch·ªâ c·∫ßn $or
        Object.assign(query, searchConditions);
      }
    } else {
      // N·∫øu kh√¥ng c√≥ search, ch·ªâ c·∫ßn filter conditions
      Object.assign(query, filterConditions);
    }

    console.log('üü¢üü¢üü¢ ORDER Service - query:', JSON.stringify(query));

    const [orders, total] = await Promise.all([
      this.orderModel
        .find(query)
        .populate('user', 'name email')
        .populate('items.product', 'name price')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .exec(),
      this.orderModel.countDocuments(query),
    ]);

    console.log('üü¢üü¢üü¢ ORDER Service - found:', total, 'orders');

    return {
      data: orders,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        totalItems: total,
        itemsPerPage: limit,
      },
    };
  }

  async findById(id: string) {
    return this.orderModel
      .findById(id)
      .populate('user', 'name email phone')
      .populate('items.product', 'name price images')
      .exec();
  }

  async updateStatus(id: string, status: string) {
    // L·∫•y th√¥ng tin ƒë∆°n h√†ng hi·ªán t·∫°i
    const order = await this.orderModel.findById(id).exec();
    
    if (!order) {
      throw new Error('Order not found');
    }
    
    console.log('üîç UPDATE STATUS - Order ID:', id);
    console.log('üîç UPDATE STATUS - Current status:', order.status);
    console.log('üîç UPDATE STATUS - New status:', status);
    console.log('üîç UPDATE STATUS - Payment method:', order.paymentMethod);
    console.log('üîç UPDATE STATUS - Current payment status:', order.paymentStatus);
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const updateData: any = { status };
    
    // N·∫øu chuy·ªÉn sang "ƒë√£ giao" v√† thanh to√°n COD th√¨ t·ª± ƒë·ªông chuy·ªÉn sang "ƒë√£ thanh to√°n"
    if (status === 'delivered' && order.paymentMethod === 'COD') {
      console.log('‚úÖ AUTO UPDATE - Setting paymentStatus to paid');
      updateData.paymentStatus = 'paid';
    }
    
    console.log('üîç UPDATE STATUS - Update data:', updateData);
    
    // S·ª≠ d·ª•ng findOneAndUpdate ƒë·ªÉ c·∫≠p nh·∫≠t v√† tr·∫£ v·ªÅ ngay l·∫≠p t·ª©c
    const updatedOrder = await this.orderModel
      .findOneAndUpdate(
        { _id: id }, 
        updateData, 
        { 
          new: true,  // Tr·∫£ v·ªÅ document sau khi update
          runValidators: true  // Ch·∫°y validators khi update
        }
      )
      .exec();
    
    if (!updatedOrder) {
      console.error('‚ùå ERROR: Could not update order');
      throw new Error('Failed to update order');
    }
    
    console.log('üîç AFTER UPDATE - Order status:', updatedOrder.status);
    console.log('üîç AFTER UPDATE - Payment status:', updatedOrder.paymentStatus);
    
    return updatedOrder;
  }

  async updatePaymentStatus(id: string, paymentStatus: string) {
    return this.orderModel
      .findByIdAndUpdate(id, { paymentStatus }, { new: true })
      .exec();
  }

  async getOrderStats() {
    // Count orders by status
    const totalOrders = await this.orderModel.countDocuments();
    const pendingOrders = await this.orderModel.countDocuments({
      status: 'pending',
    });
    const processingOrders = await this.orderModel.countDocuments({
      status: 'processing',
    });
    const deliveredOrders = await this.orderModel.countDocuments({
      status: 'delivered',
    });
    const cancelledOrders = await this.orderModel.countDocuments({
      status: 'cancelled',
    });

    // Calculate total revenue (all orders)
    const totalRevenueResult = await this.orderModel.aggregate([
      { $group: { _id: null, total: { $sum: '$totalPrice' } } },
    ]);

    // Calculate pending revenue (pending + processing orders)
    const pendingRevenueResult = await this.orderModel.aggregate([
      { $match: { status: { $in: ['pending', 'processing'] } } },
      { $group: { _id: null, total: { $sum: '$totalPrice' } } },
    ]);

    // Calculate confirmed revenue (delivered orders)
    const confirmedRevenueResult = await this.orderModel.aggregate([
      { $match: { status: 'delivered' } },
      { $group: { _id: null, total: { $sum: '$totalPrice' } } },
    ]);

    return {
      totalOrders,
      pendingOrders,
      processingOrders,
      deliveredOrders,
      cancelledOrders,
      totalRevenue: totalRevenueResult[0]?.total || 0,
      pendingRevenue: pendingRevenueResult[0]?.total || 0,
      confirmedRevenue: confirmedRevenueResult[0]?.total || 0,
    };
  }
}




