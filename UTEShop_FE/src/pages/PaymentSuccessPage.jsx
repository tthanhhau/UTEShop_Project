import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { createOrder } from '../features/order/orderSlice';
import { Card } from '../components/ui/card';
import { Button } from '../components/ui/button';

const PaymentSuccessPage = () => {
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [searchParams] = useSearchParams();
    const [paymentInfo, setPaymentInfo] = useState(null);
    const [orderInfo, setOrderInfo] = useState(null);
    const [isProcessingOrder, setIsProcessingOrder] = useState(false);
    const [orderError, setOrderError] = useState('');
    const { user } = useSelector((state) => state.auth);

    // X·ª≠ l√Ω t·∫°o order t·ª´ MoMo callback
    const handleCreateOrderFromCallback = useCallback(async (momoOrderId) => {
        console.log('üîÑ handleCreateOrderFromCallback called with orderId:', momoOrderId);
        console.log('üë§ Current user:', user);

        if (!user) {
            console.log('‚ùå No user found');
            setOrderError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ x·ª≠ l√Ω ƒë∆°n h√†ng');
            return;
        }

        // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ localStorage
        const paymentData = localStorage.getItem('momoPaymentSuccess');
        if (!paymentData) {
            setOrderError('Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.');
            return;
        }

        try {
            const { productDetails, quantity, shippingAddress } = JSON.parse(paymentData);

            if (!productDetails) {
                setOrderError('Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.');
                return;
            }

            setIsProcessingOrder(true);
            setOrderError('');

            // T√≠nh t·ªïng gi√°
            const subtotal = productDetails.price * quantity;
            const discountAmount = productDetails.discountPercentage > 0
                ? subtotal * productDetails.discountPercentage / 100
                : 0;
            const totalPrice = subtotal - discountAmount;

            const orderData = {
                items: [{
                    product: productDetails._id,
                    quantity: quantity,
                    price: productDetails.price
                }],
                totalPrice,
                shippingAddress: shippingAddress || 'ƒê·ªãa ch·ªâ ch∆∞a c·∫≠p nh·∫≠t',
                paymentMethod: 'MOMO',
                momoOrderId: momoOrderId,
            };

            console.log('üì¶ Creating order with data:', orderData);
            const result = await dispatch(createOrder(orderData)).unwrap();
            console.log('‚úÖ Order created successfully:', result);

            // X√≥a d·ªØ li·ªáu localStorage sau khi t·∫°o order th√†nh c√¥ng
            localStorage.removeItem('momoPaymentSuccess');
            console.log('üóëÔ∏è Removed localStorage data');

            // Notify checkout page ƒë·ªÉ ƒë√≥ng popup v√† chuy·ªÉn trang
            localStorage.setItem('momoPaymentComplete', JSON.stringify({
                orderId: momoOrderId,
                timestamp: Date.now()
            }));

            console.log('‚úÖ Order created, notifying checkout page');

            // Kh√¥ng t·ª± ƒë·ªông chuy·ªÉn h∆∞·ªõng, ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn n√∫t
            console.log('‚úÖ Order created successfully, waiting for user action');

        } catch (error) {
            console.error('Order Creation Error from MoMo callback:', error);
            setOrderError(error?.message || 'T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.');
        } finally {
            setIsProcessingOrder(false);
        }
    }, [user, dispatch, navigate]);

    useEffect(() => {
        // Ki·ªÉm tra xem c√≥ th√¥ng tin ƒë∆°n h√†ng t·ª´ MoMoPaymentForm kh√¥ng
        const savedOrderInfo = localStorage.getItem('momoPaymentSuccess');
        if (savedOrderInfo) {
            try {
                const orderData = JSON.parse(savedOrderInfo);
                setOrderInfo(orderData);
                console.log('üì¶ Loaded order info from localStorage:', orderData);

                // X√≥a localStorage sau khi ƒë√£ load
                localStorage.removeItem('momoPaymentSuccess');
            } catch (error) {
                console.error('Error parsing order info:', error);
            }
        }

        // L·∫•y th√¥ng tin thanh to√°n t·ª´ URL params (cho tr∆∞·ªùng h·ª£p callback t·ª´ MoMo)
        const partnerCode = searchParams.get('partnerCode');
        const orderId = searchParams.get('orderId');
        const requestId = searchParams.get('requestId');
        const amount = searchParams.get('amount');
        const orderInfoParam = searchParams.get('orderInfo');
        const resultCode = searchParams.get('resultCode');
        const message = searchParams.get('message');

        if (orderId && amount) {
            setPaymentInfo({
                partnerCode,
                orderId,
                requestId,
                amount: parseInt(amount),
                orderInfo: decodeURIComponent(orderInfoParam || ''),
                resultCode,
                message: decodeURIComponent(message || '')
            });

            // N·∫øu thanh to√°n th√†nh c√¥ng - signal v·ªÅ checkout page
            if (resultCode === '0' && partnerCode === 'MOMO') {
                console.log('üéâ MoMo payment successful, signaling checkout page...');

                // Signal checkout page ƒë·ªÉ t·∫°o order
                localStorage.setItem('momoPaymentComplete', JSON.stringify({
                    orderId: orderId,
                    requestId: requestId,
                    timestamp: Date.now(),
                    success: true
                }));

                console.log('‚úÖ Signaled checkout page');
                console.log('‚úÖ Payment successful, showing success page');
            }
        }
    }, [searchParams, handleCreateOrderFromCallback]);

    const handleViewDetails = () => {
        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang theo d√µi ƒë∆°n h√†ng
        //navigate(`/orders/${order._id}`);
    };

    const handleGoHome = () => {
        navigate('/');
    };

    const isSuccess = paymentInfo?.resultCode === '0' || paymentInfo?.message?.includes('success') || orderInfo !== null;

    return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
            <Card className="max-w-md w-full p-8 text-center">
                <div className="mb-6">
                    {isSuccess ? (
                        <div className="text-6xl mb-4">‚úÖ</div>
                    ) : (
                        <div className="text-6xl mb-4">‚ùå</div>
                    )}

                    <h1 className="text-2xl font-bold text-gray-800 mb-2">
                        {isSuccess ? 'B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng!' : 'Thanh to√°n th·∫•t b·∫°i'}
                    </h1>

                    <p className="text-gray-600">
                        {isSuccess
                            ? (isProcessingOrder
                                ? 'ƒêang t·∫°o ƒë∆°n h√†ng...'
                                : 'C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n. ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.')
                            : 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.'
                        }
                    </p>

                    {isProcessingOrder && (
                        <div className="mt-4">
                            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                            <p className="text-sm text-gray-500 mt-2">ƒêang x·ª≠ l√Ω ƒë∆°n h√†ng...</p>
                        </div>
                    )}
                </div>

                {orderError && (
                    <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded text-red-700">
                        <h3 className="font-semibold mb-2">L·ªói x·ª≠ l√Ω ƒë∆°n h√†ng:</h3>
                        <p className="text-sm">{orderError}</p>
                    </div>
                )}

                {(paymentInfo || orderInfo) && (
                    <div className="mb-6 p-4 bg-gray-50 rounded-lg text-left">
                        <h3 className="font-semibold mb-2">Th√¥ng tin giao d·ªãch:</h3>
                        <div className="space-y-1 text-sm">
                            {orderInfo?.orderId && (
                                <div className="flex justify-between">
                                    <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                                    <span className="font-medium">{orderInfo.orderId}</span>
                                </div>
                            )}
                            {paymentInfo?.orderId && (
                                <div className="flex justify-between">
                                    <span className="text-gray-600">M√£ giao d·ªãch:</span>
                                    <span className="font-medium">{paymentInfo.orderId}</span>
                                </div>
                            )}
                            {orderInfo?.orderData?.totalPrice && (
                                <div className="flex justify-between">
                                    <span className="text-gray-600">S·ªë ti·ªÅn:</span>
                                    <span className="font-medium text-green-600">
                                        {orderInfo.orderData.totalPrice?.toLocaleString()}‚Ç´
                                    </span>
                                </div>
                            )}
                            {paymentInfo?.amount && (
                                <div className="flex justify-between">
                                    <span className="text-gray-600">S·ªë ti·ªÅn:</span>
                                    <span className="font-medium text-green-600">
                                        {paymentInfo.amount?.toLocaleString()}‚Ç´
                                    </span>
                                </div>
                            )}
                            {paymentInfo?.orderInfo && (
                                <div className="flex justify-between">
                                    <span className="text-gray-600">N·ªôi dung:</span>
                                    <span className="font-medium text-xs">
                                        {paymentInfo.orderInfo}
                                    </span>
                                </div>
                            )}
                            {paymentInfo?.message && (
                                <div className="flex justify-between">
                                    <span className="text-gray-600">Tr·∫°ng th√°i:</span>
                                    <span className={`font-medium ${isSuccess ? 'text-green-600' : 'text-red-600'
                                        }`}>
                                        {paymentInfo.message}
                                    </span>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                <div className="space-y-3">
                    <Button
                        onClick={handleViewDetails()}
                        className="w-full"
                    >
                        Xem chi ti·∫øt
                    </Button>

                    <Button
                        onClick={handleGoHome}
                        variant="outline"
                        className="w-full"
                    >
                        Trang ch·ªß
                    </Button>
                </div>

                <div className="mt-6 text-xs text-gray-500">
                    <p>üì± Thanh to√°n ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi MoMo</p>
                    <p>üîí Th√¥ng tin ƒë∆∞·ª£c b·∫£o m·∫≠t</p>
                </div>
            </Card>
        </div>
    );
};

export default PaymentSuccessPage;
