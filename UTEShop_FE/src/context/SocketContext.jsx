import React, { createContext, useContext, useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import io from 'socket.io-client';

import { toast } from 'react-toastify'; // Th∆∞ vi·ªán hi·ªÉn th·ªã pop-up
import 'react-toastify/dist/ReactToastify.css'; // CSS cho toast
import { addNotification } from '../redux/notificationSlice'; // Action t·ª´ Redux slice
import { selectCurrentToken } from '../features/auth/authSlice';

// T·∫°o Context
const SocketContext = createContext(null);

// Hook t√πy ch·ªânh ƒë·ªÉ d·ªÖ d√†ng s·ª≠ d·ª•ng
export const useSocket = () => {
    return useContext(SocketContext);
};

// Component Provider ƒë·ªÉ bao b·ªçc ·ª©ng d·ª•ng
export const SocketProvider = ({ children }) => {
    const [socket, setSocket] = useState(null);
    const dispatch = useDispatch();
    
    // 2. L·∫•y token t·ª´ Redux store l√†m ngu·ªìn ch√¢n l√Ω duy nh·∫•t
    const token = useSelector(selectCurrentToken);

    useEffect(() => {
        // Ch·ªâ th·ª±c hi·ªán k·∫øt n·ªëi WebSocket N·∫æU ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p (c√≥ token)
        if (token) {
            // 3. Kh·ªüi t·∫°o k·∫øt n·ªëi ƒë·∫øn server WebSocket
            // Truy·ªÅn token v√†o ph·∫ßn `auth` ƒë·ªÉ middleware ·ªü backend c√≥ th·ªÉ x√°c th·ª±c
            const newSocket = io("http://localhost:5000", {
                auth: {
                    token: token
                }
            });

            console.log("Attempting to connect to WebSocket server...");
            setSocket(newSocket);

            // 4. L·∫Øng nghe c√°c s·ª± ki·ªán t·ª´ server
            newSocket.on('connect', () => {
                console.log('‚úÖ WebSocket connected successfully! Socket ID:', newSocket.id);
            });

            newSocket.on('connect_error', (err) => {
                console.error('‚ùå WebSocket connection error:', err.message);
            });

            // --- ƒê√ÇY L√Ä LISTENER QUAN TR·ªåNG NH·∫§T ---
            // L·∫Øng nghe s·ª± ki·ªán 'new_notification' m√† backend g·ª≠i
            newSocket.on('new_notification', (notificationData) => {
                console.log('üì¨ Received new notification:', notificationData);
                
                // Hi·ªÉn th·ªã m·ªôt pop-up th√¥ng b√°o ƒë·∫πp m·∫Øt cho ng∆∞·ªùi d√πng
                toast.info(notificationData.message, {
                    onClick: () => {
                        // (T√πy ch·ªçn) ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn link c·ªßa th√¥ng b√°o khi ng∆∞·ªùi d√πng click
                        // C·∫ßn c√≥ `navigate` t·ª´ `useNavigate` n·∫øu mu·ªën d√πng t√≠nh nƒÉng n√†y
                        // navigate(notificationData.link);
                    }
                });
                
                // Dispatch action `addNotification` ƒë·ªÉ c·∫≠p nh·∫≠t Redux store
                // Gi√∫p icon chu√¥ng v√† danh s√°ch th√¥ng b√°o ƒë∆∞·ª£c c·∫≠p nh·∫≠t real-time
                dispatch(addNotification(notificationData));
            });


            // 5. D·ªçn d·∫πp (cleanup) khi component unmount ho·∫∑c khi token thay ƒë·ªïi (logout)
            // C·ª±c k·ª≥ quan tr·ªçng ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ v√† c√°c k·∫øt n·ªëi th·ª´a
            return () => {
                console.log('üîå Disconnecting WebSocket...');
                newSocket.disconnect();
            };
        } else {
            // N·∫øu kh√¥ng c√≥ token (ng∆∞·ªùi d√πng ƒë√£ logout), ƒë·∫£m b·∫£o kh√¥ng c√≥ k·∫øt n·ªëi n√†o t·ªìn t·∫°i
            if (socket) {
                socket.disconnect();
                setSocket(null);
            }
        }
    // M·∫£ng ph·ª• thu·ªôc: useEffect s·∫Ω ch·∫°y l·∫°i m·ªói khi `token` thay ƒë·ªïi
    // - Khi `token` t·ª´ null -> c√≥ gi√° tr·ªã (login): T·∫°o k·∫øt n·ªëi m·ªõi
    // - Khi `token` t·ª´ c√≥ gi√° tr·ªã -> null (logout): Ng·∫Øt k·∫øt n·ªëi c≈©
    }, [token, dispatch]);

    return (
        <SocketContext.Provider value={socket}>
            {children}
        </SocketContext.Provider>
    );
};