import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Star, MessageCircle, ThumbsUp, Edit, Trash2 } from "lucide-react";
import { Button } from "./ui/button";
import {
  getProductReviewsAsync,
  getUserReviewAsync,
  createReviewAsync,
  updateReviewAsync,
  deleteReviewAsync,
} from "../features/reviews/reviewSlice";
import Modal from "react-modal";
import api from "../api/axiosConfig"; // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt instance axios ƒë√£ c·∫•u h√¨nh s·∫µn
const ReviewSection = ({
  productId,
  autoOpenReview = false,
  orderId = null,
  onReviewChange = null,
  onOrderReviewed = null,
}) => {
  const dispatch = useDispatch();
  const { user } = useSelector((state) => state.auth);
  const { reviews, userReview, stats, loading, error } = useSelector(
    (state) => state.reviews
  );

  const [showReviewForm, setShowReviewForm] = useState(autoOpenReview);
  const [rating, setRating] = useState(5);
  const [comment, setComment] = useState("");
  const [editingReview, setEditingReview] = useState(null);
  const [currentOrderId, setCurrentOrderId] = useState(orderId);

  const [rewards, setRewards] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    if (productId) {
      dispatch(getProductReviewsAsync({ productId }));
      if (user) {
        dispatch(getUserReviewAsync(productId));
      }
    }
  }, [dispatch, productId, user]);

  const handleSubmitReview = async (e) => {
    e.preventDefault();
    if (!user) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√° s·∫£n ph·∫©m");
      return;
    }

    try {
      // 1. N·∫Øm b·∫Øt k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ thunk v√†o m·ªôt bi·∫øn (v√≠ d·ª•: `resultPayload`)
      let resultPayload;

      if (editingReview) {
        resultPayload = await dispatch(
          updateReviewAsync({
            reviewId: editingReview._id,
            reviewData: { rating, comment },
          })
        ).unwrap();
        setEditingReview(null);
      } else {
        resultPayload = await dispatch(
          createReviewAsync({
            productId,
            reviewData: {
              rating,
              comment,
              ...(currentOrderId && { orderId: currentOrderId }),
            },
          })
        ).unwrap();
      }

      // --- Logic sau khi submit th√†nh c√¥ng ---

      // Reset form
      setShowReviewForm(false);
      setComment("");
      setRating(5);

      if (onReviewChange) {
        onReviewChange();
      }
      if (orderId && onOrderReviewed) {
        onOrderReviewed(orderId);
      }

      // window.location.reload();
      if (resultPayload.rewards && resultPayload.rewards.length > 0) {
        setRewards(resultPayload.rewards); // L∆∞u danh s√°ch ph·∫ßn th∆∞·ªüng v√†o state
        setIsModalOpen(true); 
      }
      
    } catch (error) {
      console.error("Error submitting review:", error);
      const errorMessage = error || "C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°";

      if (
        typeof errorMessage === "string" &&
        errorMessage.includes("mua v√† nh·∫≠n h√†ng")
      ) {
        alert(
          "‚ùå " +
            errorMessage +
            "\n\nüí° B·∫°n c·∫ßn mua s·∫£n ph·∫©m n√†y v√† nh·∫≠n h√†ng th√†nh c√¥ng tr∆∞·ªõc khi c√≥ th·ªÉ ƒë√°nh gi√°."
        );
      } else {
        alert("‚ùå " + errorMessage);
      }
    }
  };

  const handleEditReview = (review) => {
    setEditingReview(review);
    setRating(review.rating);
    setComment(review.comment || "");
    setShowReviewForm(true);
    
  };

  const handleDeleteReview = async (reviewId) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë√°nh gi√° n√†y?")) {
      try {
        await dispatch(deleteReviewAsync(reviewId)).unwrap();
      } catch (error) {
        console.error("Error deleting review:", error);
        alert("‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a ƒë√°nh gi√°");
      }
    }
  };

  const renderStars = (rating, interactive = false, onRatingChange = null) => {
    return (
      <div className="flex gap-1">
        {[1, 2, 3, 4, 5].map((star) => (
          <Star
            key={star}
            className={`w-5 h-5 ${
              star <= rating ? "text-yellow-400 fill-current" : "text-gray-300"
            } ${interactive ? "cursor-pointer hover:scale-110" : ""}`}
            onClick={
              interactive && onRatingChange
                ? () => onRatingChange(star)
                : undefined
            }
          />
        ))}
      </div>
    );
  };
  /**
   * X·ª≠ l√Ω logic khi ng∆∞·ªùi d√πng b·∫•m n√∫t "Ch·ªçn" ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng.
   * @param {object} reward - ƒê·ªëi t∆∞·ª£ng ph·∫ßn th∆∞·ªüng m√† ng∆∞·ªùi d√πng ƒë√£ ch·ªçn.
   */

  const handleClaimReward = async (reward) => {
    console.log("Attempting to claim reward:", reward);

    try {
      // 1. Chu·∫©n b·ªã payload (d·ªØ li·ªáu) ƒë·ªÉ g·ª≠i ƒë·∫øn backend.
      // Payload n√†y ch·ª©a t·∫•t c·∫£ th√¥ng tin m√† backend c·∫ßn ƒë·ªÉ x·ª≠ l√Ω.
      const payload = {
        rewardType: reward.type,
        // D√πng to√°n t·ª≠ `&&` ƒë·ªÉ ch·ªâ th√™m thu·ªôc t√≠nh n·∫øu n√≥ t·ªìn t·∫°i
        ...(reward.voucherCode && { voucherCode: reward.voucherCode }),
        ...(reward.value && { value: reward.value }),
      };

      // 2. G·ªçi ƒë·∫øn API endpoint '/user/claim-reward' m√† b·∫°n ƒë√£ t·∫°o.
      // S·ª≠ d·ª•ng instance axios ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh (v√≠ d·ª•: `api`).
      const response = await api.post("/user/claim-reward", payload);

      // 3. X·ª≠ l√Ω khi th√†nh c√¥ng:
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng m√† server tr·∫£ v·ªÅ (v√≠ d·ª•: "B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c 100 ƒëi·ªÉm!").
      alert(response.data.message);

      // ƒê√≥ng modal sau khi nh·∫≠n th∆∞·ªüng th√†nh c√¥ng.
      setIsModalOpen(false);
      window.location.reload();

      // (T√πy ch·ªçn) C·∫≠p nh·∫≠t state ng∆∞·ªùi d√πng trong Redux n·∫øu c·∫ßn
      // V√≠ d·ª•: dispatch(updateUserPoints(response.data.updatedPoints));
    } catch (error) {
      // 4. X·ª≠ l√Ω khi c√≥ l·ªói:
      console.error("Failed to claim reward:", error);

      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói th√¢n thi·ªán cho ng∆∞·ªùi d√πng.
      // L·∫•y message t·ª´ response c·ªßa server n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng m·ªôt th√¥ng b√°o chung.
      const errorMessage =
        error.response?.data?.message ||
        "Nh·∫≠n th∆∞·ªüng th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.";
      alert(errorMessage);
    }
  };

  if (loading && reviews.length === 0) {
    return (
      <div className="animate-pulse space-y-4">
        <div className="h-6 bg-gray-200 rounded w-1/4"></div>
        <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        <div className="space-y-2">
          {Array.from({ length: 3 }).map((_, i) => (
            <div key={i} className="h-20 bg-gray-200 rounded"></div>
          ))}
        </div>
      </div>
    );
  }

  // Style cho react-modal v·ªõi scroll
  const customModalStyles = {
    content: {
      top: "50%",
      left: "50%",
      right: "auto", 
      bottom: "auto",
      marginRight: "-50%",
      transform: "translate(-50%, -50%)",
      border: "none",
      borderRadius: "12px",
      padding: "0",
      width: "90%",
      maxWidth: "600px",
      maxHeight: "80vh", // Gi·ªõi h·∫°n chi·ªÅu cao
      overflow: "hidden", // ·∫®n overflow c·ªßa modal ch√≠nh
      boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)"
    },
    overlay: {
      backgroundColor: "rgba(0, 0, 0, 0.6)",
      zIndex: 1000,
    },
  };

  return (
    <div className="space-y-6">
      <Modal
        isOpen={isModalOpen}
        onRequestClose={() => setIsModalOpen(false)} // Cho ph√©p ƒë√≥ng b·∫±ng Esc ho·∫∑c click n·ªÅn
        style={customModalStyles}
        contentLabel="Reward Selection Modal"
      >
        <div className="bg-white rounded-lg">
          {/* Header v·ªõi n√∫t X */}
          <div className="flex justify-between items-center p-6 border-b border-gray-200">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 mb-1">
                üéâ C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!
              </h2>
              <p className="text-gray-600">Vui l√≤ng ch·ªçn ph·∫ßn th∆∞·ªüng b·∫°n mu·ªën nh·∫≠n:</p>
            </div>
            <button
              onClick={() => setIsModalOpen(false)}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200"
              title="ƒê√≥ng"
            >
              <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          {/* Scrollable content */}
          <div className="p-6 max-h-96 overflow-y-auto space-y-4">
            {rewards.map((reward, index) => (
              <div
                key={index}
                className="p-5 border border-gray-200 rounded-xl bg-gradient-to-r from-blue-50 to-purple-50 hover:from-blue-100 hover:to-purple-100 transition-all duration-200 shadow-sm hover:shadow-md"
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <h3 className="font-bold text-lg text-gray-800 mb-2">
                      {reward.type === 'VOUCHER' ? 'üéüÔ∏è Voucher Gi·∫£m Gi√°' : 'üíé ƒêi·ªÉm T√≠ch L≈©y'}
                    </h3>
                    <p className="text-gray-700 mb-3 font-medium">{reward.description}</p>
                  
                  {reward.type === 'VOUCHER' && (
                    <div className="space-y-1 text-sm text-gray-500">
                      <div>üìã M√£: <span className="font-mono bg-gray-100 px-2 py-1 rounded">{reward.voucherCode}</span></div>
                      {reward.discountType === 'PERCENTAGE' && (
                        <div>üí∞ Gi·∫£m: {reward.discountValue}%</div>
                      )}
                      {reward.discountType === 'FIXED_AMOUNT' && (
                        <div>üí∞ Gi·∫£m: {reward.discountValue?.toLocaleString()}‚Ç´</div>
                      )}
                      {reward.discountType === 'FREE_SHIP' && (
                        <div>üöö Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn</div>
                      )}
                      {reward.minOrderAmount > 0 && (
                        <div>üì¶ ƒê∆°n t·ªëi thi·ªÉu: {reward.minOrderAmount?.toLocaleString()}‚Ç´</div>
                      )}
                      {reward.endDate && (
                        <div>‚è∞ H·∫°n ƒë·∫øn: {new Date(reward.endDate).toLocaleDateString('vi-VN')}</div>
                      )}
                    </div>
                  )}
                  
                  {reward.type === 'POINTS' && (
                    <div className="text-sm text-gray-500">
                      üíé Nh·∫≠n ngay {reward.value} ƒëi·ªÉm t√≠ch l≈©y
                    </div>
                  )}
                </div>
                
                  <Button 
                    size="lg" 
                    onClick={() => handleClaimReward(reward)}
                    className="ml-4 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold px-6 py-2 rounded-lg shadow-md hover:shadow-lg transform hover:scale-105 transition-all duration-200"
                  >
                    ‚ú® Nh·∫≠n
                  </Button>
                </div>
              </div>
            ))}
          </div>
          
          {/* Footer */}
          <div className="p-6 border-t border-gray-200 bg-gray-50 rounded-b-lg">
            <p className="text-sm text-gray-500 text-center">
              üí° B·∫°n c√≥ th·ªÉ ƒë√≥ng c·ª≠a s·ªï n√†y v√† ch·ªçn ph·∫ßn th∆∞·ªüng sau trong t√†i kho·∫£n
            </p>
          </div>
        </div>
      </Modal>

      {/* Review Stats */}
      <div className="bg-gray-50 rounded-lg p-4">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">ƒê√°nh gi√° s·∫£n ph·∫©m</h3>
          {user && !userReview && (
            <button
              onClick={() => setShowReviewForm(true)}
              className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
            >
              Vi·∫øt ƒë√°nh gi√°
            </button>
          )}
          {!user && (
            <div className="text-sm text-gray-500">
              <span>Vui l√≤ng </span>
              <a href="/login" className="text-blue-500 hover:underline">
                ƒëƒÉng nh·∫≠p
              </a>
              <span> ƒë·ªÉ ƒë√°nh gi√°</span>
            </div>
          )}
        </div>

        <div className="flex items-center gap-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-yellow-500">
              {stats.averageRating.toFixed(1)}
            </div>
            <div className="flex justify-center">
              {renderStars(Math.round(stats.averageRating))}
            </div>
            <div className="text-sm text-gray-600 mt-1">
              {stats.totalReviews} ƒë√°nh gi√°
            </div>
          </div>

          <div className="flex-1 space-y-1">
            {[5, 4, 3, 2, 1].map((star) => {
              const count = stats.ratingDistribution[star] || 0;
              const percentage =
                stats.totalReviews > 0 ? (count / stats.totalReviews) * 100 : 0;

              return (
                <div key={star} className="flex items-center gap-2 text-sm">
                  <span className="w-3">{star}</span>
                  <Star className="w-3 h-3 text-yellow-400 fill-current" />
                  <div className="flex-1 bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-yellow-400 h-2 rounded-full"
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                  <span className="w-8 text-gray-600">{count}</span>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Review Form */}
      {showReviewForm && (
        <div className="bg-white border rounded-lg p-4">
          <h4 className="font-semibold mb-4">
            {editingReview ? "Ch·ªânh s·ª≠a ƒë√°nh gi√°" : "Vi·∫øt ƒë√°nh gi√°"}
          </h4>
          {!editingReview && (
            <div className="space-y-3 mb-4">
              {currentOrderId && (
                <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                  <div className="flex items-center gap-2">
                    <div className="w-5 h-5 bg-green-400 rounded-full flex items-center justify-center">
                      <span className="text-white text-xs">‚úì</span>
                    </div>
                    <p className="text-sm text-green-800">
                      <strong>ƒê√£ x√°c th·ª±c:</strong> B·∫°n ƒë√£ mua v√† nh·∫≠n h√†ng
                      th√†nh c√¥ng. C√≥ th·ªÉ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y.
                    </p>
                  </div>
                </div>
              )}
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 bg-yellow-400 rounded-full flex items-center justify-center">
                    <span className="text-white text-xs">!</span>
                  </div>
                  <p className="text-sm text-yellow-800">
                    <strong>L∆∞u √Ω:</strong> B·∫°n ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° s·∫£n ph·∫©m sau
                    khi ƒë√£ mua v√† nh·∫≠n h√†ng th√†nh c√¥ng.
                  </p>
                </div>
              </div>
            </div>
          )}
          <form onSubmit={handleSubmitReview} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">ƒê√°nh gi√°</label>
              {renderStars(rating, true, setRating)}
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">
                B√¨nh lu·∫≠n
              </label>
              <textarea
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                rows="4"
                placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ s·∫£n ph·∫©m..."
                maxLength="500"
              />
              <div className="text-xs text-gray-500 mt-1">
                {comment.length}/500 k√Ω t·ª±
              </div>
            </div>
            <div className="flex gap-2">
              <button
                type="submit"
                className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
              >
                {editingReview ? "C·∫≠p nh·∫≠t" : "G·ª≠i ƒë√°nh gi√°"}
              </button>
              <button
                type="button"
                onClick={() => {
                  setShowReviewForm(false);
                  setEditingReview(null);
                  setComment("");
                  setRating(5);
                }}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
              >
                H·ªßy
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Reviews List */}
      <div className="space-y-4">
        {reviews.map((review) => (
          <div key={review._id} className="bg-white border rounded-lg p-4">
            <div className="flex items-start justify-between mb-3">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                  {review.user.avatarUrl ? (
                    <img
                      src={review.user.avatarUrl}
                      alt={review.user.name}
                      className="w-10 h-10 rounded-full object-cover"
                    />
                  ) : (
                    <span className="text-gray-600 font-medium">
                      {review.user.name.charAt(0).toUpperCase()}
                    </span>
                  )}
                </div>
                <div>
                  <div className="font-medium">{review.user.name}</div>
                  <div className="text-sm text-gray-500">
                    {new Date(review.createdAt).toLocaleDateString("vi-VN")}
                  </div>
                </div>
              </div>

              {user && user._id === review.user._id && (
                <div className="flex gap-2">
                  <button
                    onClick={() => handleEditReview(review)}
                    className="text-blue-500 hover:text-blue-700 p-1"
                    title="Ch·ªânh s·ª≠a"
                  >
                    <Edit className="w-4 h-4" />
                  </button>
                  {/*<button
                    onClick={() => handleDeleteReview(review._id)}
                    className="text-red-500 hover:text-red-700 p-1"
                    title="X√≥a"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>*/}
                </div>
              )}
            </div>

            <div className="mb-3">{renderStars(review.rating)}</div>

            {review.comment && (
              <p className="text-gray-700">{review.comment}</p>
            )}
          </div>
        ))}

        {reviews.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <MessageCircle className="w-12 h-12 mx-auto mb-2 text-gray-300" />
            <p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ReviewSection;
