import axios from "axios";

// T·∫°o m·ªôt instance c·ªßa Axios
const api = axios.create({
  baseURL: "http://localhost:5000/api", // Thay b·∫±ng baseURL c·ªßa API
});

// Th√™m m·ªôt request interceptor
api.interceptors.request.use(
  (config) => {
    // L·∫•y token t·ª´ sessionStorage
    const token = sessionStorage.getItem("token");

    // D√≤ng console.log n√†y h·ªØu √≠ch cho vi·ªác debug, ƒë∆∞·ª£c gi·ªØ l·∫°i t·ª´ nh√°nh dev_hau1
    console.log('üîç Request interceptor - Token:', token ? 'Token exists' : 'No token');

    // N·∫øu token t·ªìn t·∫°i, th√™m n√≥ v√†o header Authorization
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }

    return config;
  },
  (error) => {
    // X·ª≠ l√Ω l·ªói request
    return Promise.reject(error);
  }
);

// Th√™m response interceptor ƒë·ªÉ x·ª≠ l√Ω l·ªói x√°c th·ª±c (authentication)
api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    // Log l·ªói ra console ƒë·ªÉ d·ªÖ debug
    console.log('üîç Response interceptor - Error:', error.response?.data);
    
    // N·∫øu nh·∫≠n ƒë∆∞·ª£c l·ªói 401 (Unauthorized)
    if (error.response?.status === 401) {
      const errorCode = error.response?.data?.code;

      // Ki·ªÉm tra xem m√£ l·ªói c√≥ ph·∫£i l√† l·ªói li√™n quan ƒë·∫øn token hay kh√¥ng
      if (['TOKEN_EXPIRED', 'INVALID_TOKEN', 'NO_TOKEN'].includes(errorCode)) {
        
        // X√≥a to√†n b·ªô th√¥ng tin ng∆∞·ªùi d√πng kh·ªèi sessionStorage
        sessionStorage.removeItem('token');
        sessionStorage.removeItem('user');
        sessionStorage.removeItem('refreshToken');
        
        // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng v·ªÅ trang ƒëƒÉng nh·∫≠p
        // Ch·ªâ chuy·ªÉn h∆∞·ªõng n·∫øu h·ªç kh√¥ng ·ªü s·∫µn trang ƒëƒÉng nh·∫≠p ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
        if (window.location.pathname !== '/login') {
          window.location.href = '/login';
        }
      }
    }
    
    return Promise.reject(error);
  }
);

export default api;